#!/bin/bash
# This is a bash script that sets up the user environment
# It should be called from the .bashrc file with "source path/to/bashrc-additions"

# Get the current absolute path of this script
DIR_NAME=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")

#Some variables to export to the environment
export TOOLS="${HOME}/tools"
export LS_COLORS='di=4:fi=0:ln=31:pi=5:so=5:cd=5:or=40:mi=0:ex=32'
export PATH="${TOOLS}/testssl.sh:${TOOLS}/ciscot7:${HOME}/tools/sts-3.2.7:${HOME}/.local/bin:${GOPATH}/bin:${PATH}:${TOOLS}/gitleaks:${TOOLS}/trufflehog"
export PS1='\[\e]0;\w\a\]\n\[\e[32m\]\u@\h \[\e[33m\]\w\[\e[0m\]\n\$ '

# Add your own aliases here
alias getclip="powershell.exe -command get-clipboard | dos2unix"          #An alias to get stuff from the Windows clipboard
alias ls='ls --color=auto'
alias l1="ls -1"
alias putclip="clip.exe"        #An alias to put stuff in the Windows clipboard 

complete -C aws_completer aws

############################################
########### WSL2 SSH Agent #################
############################################
# This section sets up the SSH and GPG agent sockets for WSL2
# It uses socat to create the sockets and wsl2-ssh-pageant.exe to handle the SSH agent
# It needs to be run before the daily tasks section below in case there are Git repos 
# needing to be updated which use your Yubikey
win_gpg=$(which gpg.exe 2>/dev/null)
# As a pre-requisite to using YubiKey in WSL, test if the Windows GPG is installed
if test -n "$win_gpg" && test -f "$win_gpg"; then
    source $DIR_NAME/configure-yubikey    
else
    echo >&2 "WARNING: WinGPG not found on the path. SSH agent will not be set up."
fi

############################################
######### END WSL2 SSH Agent ###############
############################################


###########################################
######### Run these tasks daily ###########
###########################################

# Get the current date
current_date=$(date +%Y-%m-%d)
marker_file="$HOME/.daily_tasks_done"

# Get the last run date from the marker file (if it exists)
# If the marker file doesn't exist, send the error to /dev/null
last_run_date=$(cat $marker_file 2>/dev/null)

# If the last run date is not today, run the tasks
if [ "$current_date" != "$last_run_date" ]; then
    # Find all executable files in the .local.d directory
    # We'll use this method instead of run-parts so that we can "source" the scripts
    # in case any scripts export an environment variable to the main shell environment
    for script in "$DIR_NAME/.daily_tasks.d/"*; do
        # Check if the file is executable
        if [ -x "$script" ]; then
            # Run the script
            source "$script"
        fi
    done

    # Create/update the marker file to indicate that the tasks have been run
    echo "$current_date" > $marker_file
    echo "Daily tasks completed."
else
    echo "Daily tasks have already been run today." 
fi

############################################
######### End of daily tasks ###############
############################################

# Run any customized, local scripts you've placed in the ${DIR_NAME}.local.d/ directory
# This is a good place to put any scripts you want to run at startup
if [ -d "$DIR_NAME/.local.d" ]; then
    # Find all executable files in the .local.d directory
    # We'll use this method instead of run-parts so that we can "source" the scripts
    # in case any scripts export an environment variable to the main shell environment
    for script in "$DIR_NAME/.local.d/"*; do
        # Check if the file is executable
        if [ -x "$script" ]; then
            # Run the script
            source "$script"
        fi
    done
fi

#A little fun... use the fortune and cowsay man pages to sort it out.
fortune -a | cowsay -f vader